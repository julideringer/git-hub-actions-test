name: Deploy Lambda Functions

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Print changed files
      run: |
        echo "List of changed files:" 
        echo $(git diff --name-only HEAD^ HEAD)

    - name: Set AWS Credentials Based on Branch
      if: github.ref == 'refs/heads/main' # Para producción
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set AWS Credentials Based on Branch
      if: github.ref == 'refs/heads/develop' # Para desarrollo
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ secrets.AWS_REGION_DEV }}

    - name: Install Dependencies
      run: |
        pip install flake8 black pytest pytest-cov coverage
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Create ZIPs for Lambda functions
      run: |
              # Inicializa un array para almacenar los nombres de los archivos ZIP creados
              zip_files=()
              # Crea una carpeta temporal para empaquetar solo lo necesario
              mkdir -p /tmp/zip_file_lambda
              
              # Archivo para guardar la lista de archivos ZIP
              zip_file_list="/tmp/zip_file_lambda/zip_files.txt"
              
              # Función para crear ZIPs de funciones Lambda en un directorio dado
              create_zip_files() {
                  local dir=$1
                  cd $dir
      
                  # Recorre todos los archivos .py en el directorio
                  for lambda_file in *.py; do
                    # Extrae el nombre del archivo sin la extensión .py
                    function_name=$(basename $lambda_file .py)
      
                    # Cambia el nombre del archivo a lambda_function.py temporalmente
                    mv $lambda_file lambda_function.py
                    
                    # Crea el archivo ZIP con el nombre de la función
                    zip -r ../${function_name}.zip lambda_function.py
                    
                    # Devuelve el archivo a su nombre original
                    mv lambda_function.py $lambda_file

                    # Crea el archivo ZIP incluyendo las dependencias en trips_tools/
                    zip -r ../${function_name}.zip lambda_function.py ../trips_tools/

                    # Crea el archivo ZIP incluyendo las dependencias en trips_tools/
                    zip -r ../${function_name}.zip lambda_function.py ../common_tools/

                    # Crea el archivo ZIP incluyendo las dependencias en routines_tools/
                    zip -r ../${function_name}.zip lambda_function.py ../routines_tools/
                    
                    # Agrega el nombre del ZIP al array
                    zip_files+=("${function_name}.zip")

                    # Escribe el nombre del archivo ZIP en el archivo de texto
                    echo "${function_name}.zip" >> "$zip_file_list"
                    
                    echo "Creado ZIP para $function_name en $dir"
                  done
      
                  # Verificar que los archivos ZIP se crearon correctamente
                  ls -l ../
                  cd ..
              }

              # Función para crear ZIPs de funciones Lambda en un subdirectorio dado
              create_zip_files_subdirectory() {
                  local dir=$1
                  cd $dir
          
                  # Recorre todos los archivos .py en el directorio y sus subdirectorios
                  find . -type d -path "./profile/docker_scripts" -prune -o -type f -name "*.py" -print | while read -r lambda_file; do
                    # Extrae el nombre del archivo sin la extensión y la ruta relativa
                    function_name=$(basename "$lambda_file" .py)
                    file_dir=$(dirname "$lambda_file")
          
                    # Cambia el nombre del archivo a lambda_function.py temporalmente en su directorio
                    mv "$lambda_file" "${file_dir}/lambda_function.py"
                    
                    # Crea el archivo ZIP incluyendo las dependencias en trips_tools/
                    zip -r ../${function_name}.zip lambda_function.py ../trips_tools/

                    # Crea el archivo ZIP incluyendo las dependencias en trips_tools/
                    zip -r ../${function_name}.zip lambda_function.py ../common_tools/

                    # Crea el archivo ZIP incluyendo las dependencias en routines_tools/
                    zip -r ../${function_name}.zip lambda_function.py ../routines_tools/
                    
                    # Devuelve el archivo a su nombre original
                    mv "${file_dir}/lambda_function.py" "$lambda_file"
                    
                    # Agrega el nombre del ZIP al array
                    zip_files+=("${function_name}.zip")
          
                    # Escribe el nombre del archivo ZIP en el archivo de texto
                    echo "${function_name}.zip" >> "$zip_file_list"
                    
                    echo "Creado ZIP para $function_name en $dir/$file_dir"
                  done
          
                  # Verificar que los archivos ZIP se crearon correctamente
                  ls -l ../
                  cd ..
              }
      
              # Crear ZIPs en los directorios 'src/trips' y 'src/routines'
              create_zip_files "src/trips"
              create_zip_files "routines"
              create_zip_files "payments"
              create_zip_files "chat"
              create_zip_files "reservations"
              create_zip_files "signin"
              create_zip_files "signup"
              create_zip_files "superadmin"
              create_zip_files_subdirectory "users"
              # Imprime los archivos ZIP generados en la carpeta temporal
              echo "Archivos ZIP creados en /tmp/zip_file_lambda:"
              cat /tmp/zip_file_lambda/zip_files.txt
      
    - name: Check and Create/Update Lambda functions
      run: |
              # Lee el archivo permissions_lambda.json
              permission_json="../permissions_lambda.json"
              trust_policy_json="../trust-policy.json"

              # Función para verificar y crear funciones Lambda
              check_and_create_lambda() {
                  local dir=$1
                  cd $dir
                  # Muestra el directorio actual
                  echo "Directorio actual: $(pwd)"
                  echo "Directorio actual: $(ls -l)"
      
                  # Recorre todos los archivos .py en el directorio
                  for lambda_file in *.py; do
                    # Extrae el nombre de la función a partir del archivo
                    function_name=$(basename $lambda_file .py)
                    
                    # Verifica si la función Lambda ya existe en AWS
                    if aws lambda get-function --function-name $function_name > /dev/null 2>&1; then
                      echo "La función Lambda $function_name ya existe, no se crea de nuevo."
                      zip_file_test1=$(find ../ -name "${function_name}.zip")
                      echo "aqui esta el ziptest : $zip_file_test"
                    else
                      echo "Creando nueva función Lambda: $function_name"
                      # Verifica si el archivo ZIP existe antes de intentar usarlo
                      # Buscar el archivo ZIP específico para el Lambda
                      echo "Archivos en con zip"
                      zip_file_test=$(find ../ -name "${function_name}.zip")
                      echo "aqui esta el zip : $zip_file_test"
                      echo "Archivos en el directorio padre:"
                      ls -l ../
                      zip_file="../${function_name}.zip"
                      if [ -f "$zip_file" ]; then

                        # Extrae la política del archivo JSON si el nombre de la Lambda coincide
                        policy=$(jq -c ".lambdas[\"$function_name\"]" "$permission_json")

                        # Muestra el valor de 'policy' en los logs
                        echo "Policy para $function_name: $policy"

                        echo "Actualizando permisos para $function_name..."

                        # Crea o actualiza la política en AWS IAM
                        # Crea el rol primero si no existe
                        if ! aws iam get-role --role-name "$function_name" > /dev/null 2>&1; then
                            echo "Creando rol $function_name con la política de confianza..."
                            # Crea el rol con la política de confianza para Lambda
                            aws iam create-role --role-name "$function_name" --assume-role-policy-document file://$trust_policy_json
                        fi

                        # Asocia la política extraída al rol
                        aws iam put-role-policy --role-name "$function_name" --policy-name "${function_name}_policy" --policy-document "$policy"
                        
                        echo "role arn lo muestro: arn:aws:iam::682033485736:role/$function_name"
                        # Asegúrate de que el rol se haya creado antes de continuar
                        echo "Esperando 10 segundos para que se propague la creación del rol..."
                        sleep 10
                        # Crear la nueva función Lambda
                        aws lambda create-function \
                          --function-name $function_name \
                          --zip-file fileb://$zip_file \
                          --handler lambda_function.lambda_handler \
                          --runtime python3.10 \
                          --role arn:aws:iam::682033485736:role/$function_name \
                          --timeout 30 \
                          --memory-size 128
                      else
                        echo "Error: El archivo ZIP para $function_name no se encontró. No se puede crear la función Lambda."
                      fi
                    fi
                  done
              }

              # Lee el archivo permissions_lambda.json
              permission_json="../permissions_lambda.json"
              trust_policy_json="../trust-policy.json"

              # Función para verificar y crear funciones Lambda
              check_and_create_lambda_subdirectory() {
                  local dir=$1
                  cd $dir
                  # Muestra el directorio actual
                  echo "Directorio actual: $(pwd)"
                  echo "Directorio actual: $(ls -l)"
      
                  # Recorre todos los archivos .py en el directorio
                  for lambda_file in *.py; do
                    cd $dir
                    # Extrae el nombre de la función a partir del archivo
                    function_name=$(basename $lambda_file .py)
                    
                    # Verifica si la función Lambda ya existe en AWS
                    if aws lambda get-function --function-name $function_name > /dev/null 2>&1; then
                      echo "La función Lambda $function_name ya existe, no se crea de nuevo."
                      zip_file_test1=$(find ../ -name "${function_name}.zip")
                      echo "aqui esta el ziptest : $zip_file_test"
                    else
                      echo "Creando nueva función Lambda: $function_name"
                      # Verifica si el archivo ZIP existe antes de intentar usarlo
                      # Buscar el archivo ZIP específico para el Lambda
                      cd ..
                      zip_file="../${function_name}.zip"
                      if [ -f "$zip_file" ]; then

                        # Extrae la política del archivo JSON si el nombre de la Lambda coincide
                        policy=$(jq -c ".lambdas[\"$function_name\"]" "$permission_json")

                        # Muestra el valor de 'policy' en los logs
                        echo "Policy para $function_name: $policy"

                        echo "Actualizando permisos para $function_name..."

                        # Crea o actualiza la política en AWS IAM
                        # Crea el rol primero si no existe
                        if ! aws iam get-role --role-name "$function_name" > /dev/null 2>&1; then
                            echo "Creando rol $function_name con la política de confianza..."
                            # Crea el rol con la política de confianza para Lambda
                            aws iam create-role --role-name "$function_name" --assume-role-policy-document file://$trust_policy_json
                        fi

                        # Asocia la política extraída al rol
                        aws iam put-role-policy --role-name "$function_name" --policy-name "${function_name}_policy" --policy-document "$policy"
                        
                        echo "role arn lo muestro: arn:aws:iam::682033485736:role/$function_name"
                        # Asegúrate de que el rol se haya creado antes de continuar
                        echo "Esperando 10 segundos para que se propague la creación del rol..."
                        sleep 10
                        # Crear la nueva función Lambda
                        aws lambda create-function \
                          --function-name $function_name \
                          --zip-file fileb://$zip_file \
                          --handler lambda_function.lambda_handler \
                          --runtime python3.10 \
                          --role arn:aws:iam::682033485736:role/$function_name \
                          --timeout 30 \
                          --memory-size 128
                      else
                        echo "Error: El archivo ZIP para $function_name no se encontró. No se puede crear la función Lambda."
                      fi
                    fi
                  done
              }
      
              # Verificar y crear funciones Lambda en el directorio 'src/trips'
              check_and_create_lambda "src/trips"
    
              # Verificar y crear funciones Lambda en el directorio 'src/routines'
              check_and_create_lambda "../routines"

              # Verificar y crear funciones Lambda en el directorio 'src/chat'
              check_and_create_lambda "../chat"

              # Verificar y crear funciones Lambda en el directorio 'src/payments'
              check_and_create_lambda "../payments"

              # Verificar y crear funciones Lambda en el directorio 'src/reservations'
              check_and_create_lambda "../reservations"

              # Verificar y crear funciones Lambda en el directorio 'src/signin'
              check_and_create_lambda "../signin"

              # Verificar y crear funciones Lambda en el directorio 'src/signup'
              check_and_create_lambda "../signup"

              # Verificar y crear funciones Lambda en el directorio 'src/superadmin'
              check_and_create_lambda "../superadmin"

              # Verificar y crear funciones Lambda en el directorio 'src/users'
              check_and_create_lambda "../users"

              # Verificar y crear funciones Lambda en el directorio 'src/users'
              check_and_create_lambda_subdirectory "../users/preferences"

    - name: Update Lambda Permissions
      run: |
              # Archivo JSON actual con permisos
              current_permissions_file="src/permissions_lambda.json"
              echo "Actual fichero: $current_permissions_file"
              
              # Obtener el contenido del archivo JSON anterior directamente desde git
              previous_permissions_json=$(git show HEAD~1:src/permissions_lambda.json)
              echo "Previous permissions: $previous_permissions_json"

              # Realiza un diff para encontrar las diferencias
              diff_output=$"diff src/permissions_lambda.json <(git show HEAD~1:src/permissions_lambda.json)"

              # Mostrar diferencias
              echo "Diferencias encontradas:"
              echo "$diff_output"

              # Identificar las lambdas cambiadas
              changed_lambdas=()

              # Leer el contenido del archivo JSON actual
              current_json=$(cat "$current_permissions_file")
              previous_json=$(echo "$previous_permissions_json")

              # Función para extraer acciones de una lambda
              extract_actions() {
                  local json=$1
                  local lambda_name=$2
                  echo "$json" | jq -r --arg name "$lambda_name" '.lambdas[$name].Statement[].Action[]'
              }

              # Iterar sobre las lambdas en el JSON actual
              for lambda in $(echo "$current_json" | jq -r '.lambdas | keys[]'); do
                  # Obtener las acciones de la lambda actual y anterior
                  current_actions=$(extract_actions "$current_json" "$lambda")
                  previous_actions=$(extract_actions "$previous_json" "$lambda")

                  # Comparar las acciones
                  if [ "$current_actions" != "$previous_actions" ]; then
                      changed_lambdas_permission+=("$lambda")
                  fi
              done

              # Mostrar las lambdas que han cambiado y actualizar sus roles
              if [ ${#changed_lambdas_permission[@]} -ne 0 ]; then
                  echo "Las siguientes funciones Lambda han cambiado sus permisos:"
                  for function_name in "${changed_lambdas_permission[@]}"; do
                      echo " - $function_name"

                      # Extrae la política del archivo JSON si el nombre de la Lambda coincide
                      policy=$(jq -c ".lambdas[\"$function_name\"]" "$current_permissions_file")

                      # Asocia la política extraída al rol
                      if [ -n "$policy" ]; then
                          aws iam put-role-policy --role-name "$function_name" --policy-name "${function_name}_policy" --policy-document "$policy"
                          echo "Política actualizada para el rol de $function_name"
                      else
                          echo "Error: no se pudo extraer la política para $function_name"
                      fi
                  done
              else
                  echo "No se encontraron cambios en los permisos de las funciones Lambda."
              fi

      
    - name: Print changed files
      run: |
            echo "List of changed files:" 
            git diff --name-only HEAD^ HEAD

    - name: Find and Deploy Changed Lambda Functions other functions
      run: |
            changed_dependencies=$(git diff --name-only HEAD^ HEAD | grep -E '^src/(common_tools|trips_tools)|routines_tools/' | grep '\.py$'|| true)
            echo "hola"
            echo "$changed_dependencies"
            # Verifica la longitud de la variable
            if [ ${#changed_dependencies} -gt 0 ]; then
              lambda_file_find=$(find src/routines src/trips -type f -name "*.py")
              echo "Mostramos todos los .py que se van a cambiar por cambios en funciones: $lambda_file_find"
          
              for lambda_file in $lambda_file_find; do
                  # Extrae el nombre del archivo como nombre de la lambda
                  function_name=$(basename $lambda_file .py)
                  zip_file_name="${function_name}.zip"
                  lambda_dir=$(dirname $lambda_file)
          
                  echo "Changes detected in Lambda function: $function_name"
          
                  # Crea una carpeta temporal para empaquetar solo lo necesario
                  mkdir -p /tmp/${function_name}_package
          
                  # Copia la función Lambda específica a la carpeta temporal
                  cp $lambda_file /tmp/${function_name}_package/lambda_function.py  # Renombrar aquí
                  
                  # Copia las dependencias necesarias (por ejemplo, trips_tools) a la carpeta temporal
                  cp -r src/trips_tools /tmp/${function_name}_package/
                  cp -r src/common_tools /tmp/${function_name}_package/
          
                  # Empaqueta todo en un archivo ZIP en el directorio temporal
                  cd /tmp/${function_name}_package
                  zip -r /tmp/$zip_file_name .
          
                  # Volver a la carpeta raíz del repositorio
                  cd -
          
                  # Desplegar la función Lambda con el archivo ZIP
                  aws lambda update-function-code --function-name $function_name --zip-file fileb:///tmp/$zip_file_name
          
                  # Limpia el directorio temporal y el archivo ZIP
                  rm -rf /tmp/${function_name}_package
                  rm /tmp/$zip_file_name
              done
            fi

    - name: Actualizar diferencias
      run: |
                            changed_lambdas=$(git diff --name-only HEAD^ HEAD | grep -E '^src/(routines|trips)/.*\.py$' | uniq)
                            echo "Changed Lambda Files: $changed_lambdas"

                            for lambda_file in $changed_lambdas; do
                                # Extrae el nombre del archivo como nombre de la lambda
                                function_name=$(basename "$lambda_file" .py)
                                zip_file_name="${function_name}.zip"
                                lambda_dir=$(dirname "$lambda_file")

                                echo "Changes detected in Lambda function: $function_name"

                                # Crea una carpeta temporal para empaquetar solo lo necesario
                                mkdir -p "/tmp/${function_name}_package"

                                # Copia la función Lambda específica a la carpeta temporal
                                cp "$lambda_file" "/tmp/${function_name}_package/lambda_function.py"  # Renombrar aquí
                                
                                # Copia las dependencias necesarias (por ejemplo, trips_tools) a la carpeta temporal
                                cp -r src/trips_tools "/tmp/${function_name}_package/"
                                cp -r src/common_tools "/tmp/${function_name}_package/"
                                cp -r src/routines_tools "/tmp/${function_name}_package/"

                                # Empaqueta todo en un archivo ZIP en el directorio temporal
                                cd "/tmp/${function_name}_package" || exit
                                zip -r "/tmp/$zip_file_name" .

                                # Volver a la carpeta raíz del repositorio
                                cd -

                                # Desplegar la función Lambda con el archivo ZIP
                                aws lambda update-function-code --function-name "$function_name" --zip-file fileb:///tmp/$zip_file_name

                                # Limpia el directorio temporal y el archivo ZIP
                                rm -rf "/tmp/${function_name}_package"
                                rm "/tmp/$zip_file_name"
                            done

          
              
          