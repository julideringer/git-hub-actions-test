name: Deploy Lambda Functions

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Print changed files
      run: |
        echo "List of changed files:" 
        echo $(git diff --name-only HEAD^ HEAD)

    - name: Set AWS Credentials Based on Branch
      if: github.ref == 'refs/heads/main' # Para producción
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set AWS Credentials Based on Branch
      if: github.ref == 'refs/heads/develop' # Para desarrollo
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ secrets.AWS_REGION_DEV }}

    - name: Install Dependencies
      run: |
        pip install flake8 black pytest pytest-cov coverage

        - name: Find and Deploy Changed Lambda Functions
        run: |
          changed_lambdas=$(git diff --name-only HEAD^ HEAD | grep '^src/' | grep '\.py$' | uniq)
          echo "Changed Lambda Files: $changed_lambdas"
          
          for lambda_file in $changed_lambdas; do
            function_name=$(basename $lambda_file .py)  # Extrae el nombre del archivo como nombre de la lambda
            zip_file_name=${function_name}.zip
            handler_name=$(basename $lambda_file .py).lambda_handler  # El nombre del handler es el archivo sin .py seguido de .lambda_handler
      
            echo "Processing Lambda function: $function_name"
            echo "Handler: $handler_name"
            echo "Zipping function..."
      
            # Navegar a la carpeta donde está el archivo
            file_dir=$(dirname $lambda_file)
            cd $file_dir
            zip -r ../../$zip_file_name .
            cd ../../
      
            # Comprobar si la Lambda ya existe
            lambda_exists=$(aws lambda get-function --function-name $function_name 2>&1 || echo "not-found")
            if [[ $lambda_exists == *"not-found"* ]]; then
              echo "Lambda function $function_name does not exist, creating it..."
              
              # Crear la Lambda si no existe
              create_output=$(aws lambda create-function \
                --function-name $function_name \
                --runtime python3.9 \
                --role arn:aws:iam::<your-iam-role-arn> \
                --handler $handler_name \
                --zip-file fileb://$zip_file_name \
                --timeout 10 \
                --memory-size 128 2>&1)
      
              echo "Create output: $create_output"
              
              if [[ $create_output == *"error"* ]]; then
                echo "Failed to create Lambda function $function_name"
                exit 1
              fi
      
            else
              echo "Lambda function $function_name exists, updating it..."
              
              # Actualizar el código de la Lambda si ya existe
              update_output=$(aws lambda update-function-code \
                --function-name $function_name \
                --zip-file fileb://$zip_file_name 2>&1)
      
              echo "Update output: $update_output"
      
              if [[ $update_output == *"error"* ]]; then
                echo "Failed to update Lambda function $function_name"
                exit 1
              fi
            fi
      
            # Limpiar archivos temporales
            rm $zip_file_name
          done
      
